openapi: 3.0.3
info:
  title: Bank API Document 1.0
  description: This is a document for implements BANK API based on the OpenAPI 3.0 specification. 

servers:
  - url: https://bank.swagger.io/api/v3
tags:
  - name: account
    description: Accounts Transactions
  - name: user
    description: Operations about user
paths:
  /account/{accountId}/transaction:
    post:
      tags:
        - account
      summary: Place a transaction
      description: Place a new transaction account
      operationId: placeTransaction
      parameters:
        - name: accountId
          in: path
          description: 'Account Id'
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/xml:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccTransResponse'
        '405':
          description: Invalid input
    get:
      tags:
        - account
      summary: Returns account balance
      description: Returns a transactions 
      operationId: getAccountBalance
      parameters:
        - name: accountId
          in: path
          description: 'Account Id'
          required: true
          schema:
            type: integer
        - name: days
          in: query
          description: 'Days ago'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                example: 
                  - { 
                      date: "2023-01-01T22:17:02.170Z", 
                      type: "WITHD", 
                      curr: "U$", 
                      value: 100.22, 
                      local: 100.22, 
                      doc: "809809890", 
                      op: "D", 
                      aut: "908890809", 
                      balance: "$123123.00"
                    }
                    
                  - { 
                      date: "2023-01-01T22:17:02.170Z", 
                      type: "TRANS", 
                      curr: "U$", 
                      value: 100.22, 
                      local: 100.22, 
                      doc: "809809890", 
                      op: "C", 
                      aut: "908890809", 
                      balance: "$123123.00"
                    }
                  - { 
                      date: "2023-01-01T22:17:02.170Z", 
                      type: "WITHD", 
                      curr: "U$", 
                      value: 100.22, 
                      local: 100.22, 
                      doc: "809809890", 
                      op: "D", 
                      aut: "908890809", 
                      balance: "$123123.00"
                    }
                
      security:
        - api_key: []
  /account/{accountId}:
    get:
      tags:
        - account
      summary: Get account
      description: Get account info
      operationId: getAccount
      parameters:
        - name: accountId
          in: path
          description: 'Account Id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '405':
          description: Invalid input

  
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        typeId:
          type: string
          example: tranfer
          description: Type of transaction
          enum:
            - transfer
            - withdraw
        amount_local:
          type: integer
          format: int32
          example: 10000
          description: Value with currency of user country 
        amount_converted:
          type: integer
          format: int32
          example: 200000
          description: Value with currency to user wants convert
        curencyId:
          type: string
          example: BRL
          description: Symbol of destination currency 
        destiny_country:
          type: string
          example: 101 
        destiny_bank:
          type: string
          example: 101 
        destiny_agency:
          type: string
          example: 00021-9
        destiny_account:
          type: string
          example: 123123-X   
        origin_document:
          type: string
          example: 110010
          description: Id of transaction generate this counterpart 
        is_credit:
          type: boolean                     
        status:
          type: string
          description: Transaction Status
          example: approved
          enum:
            - placed
            - approved
            - processing
        complete:
          type: boolean
      xml:
        name: transaction
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        full_name:
          type: string
          example: John Deer
        email:
          type: string
          example: john@email.com
        photo:
          type: string
          example: '/tmp/im/98098'    
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'  
        country:
          type: string
          example: 'BR'                
        doc:
          type: string
          example: '9999999'    
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user

    AccTransResponse:
      type: object
      properties:
        document:
          type: integer
          format: int64
          example: 1231232133
      xml:  
    Account:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        code:
          type: string
          example: 788
        agency:
          type: string
          example: 677-X
        number:
          type: string
          example: 123123001-2
        country:
          type: string
          example: USA
        currency:
          type: string
          example: USD
        type:
          type: string
          example: 'main'
      xml:   
        name: account        
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://bank.swagger.io/oauth/authorize
          scopes:
            write:pets: modify bank in your account
            read:pets: read your bank
    api_key:
      type: apiKey
      name: api_key
      in: header
